
CREATE OR REPLACE FUNCTION dbo.coretransactiondetail_insert_update_delete()
		RETURNS trigger
		LANGUAGE 'plpgsql'
		COST 100
		VOLATILE NOT LEAKPROOF
AS $BODY$
		BEGIN
				IF (TG_OP = 'DELETE') THEN
						INSERT INTO dbo."CoreTransactionDetail_Audit"(
			"CoreTransactionDetailId", 
			"Amount", 
			"Comission", 
			"Charges", 
			"Notes", 
			"IsDelivery", 
			"DeliveryRefEmployeeId", 
			"AcceptedByCustomer", 
			"CustomerNotes", 
			"AcceptedByEmployee", 
			"EmployeeNotes", 
			"500RupeesNotes", 
			"200RupeesNotes", 
			"100RupeesNotes", 
			"50RupeesNotes", 
			"20RupeesNotes", 
			"10RupeesNotes", 
			"AddedByRefEmployeeId", 
			"AddedOn", 
			"LastEditedByRefEmployeeId", 
			"LastEditedOn", 
			"FromEntityUpdatedBalance", 
			"ToEntityUpdatedBalance", 
			"DepositDate",
			"CoreDeliveryTransactionDetailId",
			"FromAccountId",
				"ToAccountId",
				"UTRNumber",
				"BranchName",
				"BranchCode",
			"AuditDMLActionId", 
			"AuditDateTime")
			SELECT
			OLD."CoreTransactionDetailId", 
			OLD."Amount", 
			OLD."Comission", 
			OLD."Charges", 
			OLD."Notes", 
			OLD."IsDelivery", 
			OLD."DeliveryRefEmployeeId", 
			OLD."AcceptedByCustomer", 
			OLD."CustomerNotes", 
			OLD."AcceptedByEmployee", 
			OLD."EmployeeNotes", 
			OLD."500RupeesNotes", 
			OLD."200RupeesNotes", 
			OLD."100RupeesNotes", 
			OLD."50RupeesNotes", 
			OLD."20RupeesNotes", 
			OLD."10RupeesNotes", 
			OLD."AddedByRefEmployeeId", 
			OLD."AddedOn", 
			OLD."LastEditedByRefEmployeeId", 
			OLD."LastEditedOn", 
			OLD."FromEntityUpdatedBalance", 
			OLD."ToEntityUpdatedBalance", 
			OLD."DepositDate",
			OLD."CoreDeliveryTransactionDetailId",
			OLD."FromAccountId",
				OLD."ToAccountId",
				OLD."UTRNumber",
				OLD."BranchName",
				OLD."BranchCode",
			-1, 
			now();
				ELSIF (TG_OP = 'UPDATE') THEN
						INSERT INTO dbo."CoreTransactionDetail_Audit"(
			"CoreTransactionDetailId", 
			"Amount", 
			"Comission", 
			"Charges", 
			"Notes", 
			"IsDelivery", 
			"DeliveryRefEmployeeId", 
			"AcceptedByCustomer", 
			"CustomerNotes", 
			"AcceptedByEmployee", 
			"EmployeeNotes", 
			"500RupeesNotes", 
			"200RupeesNotes", 
			"100RupeesNotes", 
			"50RupeesNotes", 
			"20RupeesNotes", 
			"10RupeesNotes", 
			"AddedByRefEmployeeId", 
			"AddedOn", 
			"LastEditedByRefEmployeeId", 
			"LastEditedOn", 
			"FromEntityUpdatedBalance", 
			"ToEntityUpdatedBalance", 
			"DepositDate",
			"CoreDeliveryTransactionDetailId",
			"FromAccountId",
				"ToAccountId",
				"UTRNumber",
				"BranchName",
				"BranchCode",
			"AuditDMLActionId", 
			"AuditDateTime")
			SELECT
			NEW."CoreTransactionDetailId", 
			NEW."Amount", 
			NEW."Comission", 
			NEW."Charges", 
			NEW."Notes", 
			NEW."IsDelivery", 
			NEW."DeliveryRefEmployeeId", 
			NEW."AcceptedByCustomer", 
			NEW."CustomerNotes", 
			NEW."AcceptedByEmployee", 
			NEW."EmployeeNotes", 
			NEW."500RupeesNotes", 
			NEW."200RupeesNotes", 
			NEW."100RupeesNotes", 
			NEW."50RupeesNotes", 
			NEW."20RupeesNotes", 
			NEW."10RupeesNotes", 
			NEW."AddedByRefEmployeeId", 
			NEW."AddedOn", 
			NEW."LastEditedByRefEmployeeId", 
			NEW."LastEditedOn", 
			NEW."FromEntityUpdatedBalance", 
			NEW."ToEntityUpdatedBalance", 
			NEW."DepositDate",
			NEW."CoreDeliveryTransactionDetailId",
			NEW."FromAccountId",
				NEW."ToAccountId",
				NEW."UTRNumber",
				NEW."BranchName",
				NEW."BranchCode",
			0, 
			now();
				ELSIF (TG_OP = 'INSERT') THEN
						INSERT INTO dbo."CoreTransactionDetail_Audit"(
			"CoreTransactionDetailId", 
			"Amount", 
			"Comission", 
			"Charges", 
			"Notes", 
			"IsDelivery", 
			"DeliveryRefEmployeeId", 
			"AcceptedByCustomer", 
			"CustomerNotes", 
			"AcceptedByEmployee", 
			"EmployeeNotes", 
			"500RupeesNotes", 
			"200RupeesNotes", 
			"100RupeesNotes", 
			"50RupeesNotes", 
			"20RupeesNotes", 
			"10RupeesNotes", 
			"AddedByRefEmployeeId", 
			"AddedOn", 
			"LastEditedByRefEmployeeId", 
			"LastEditedOn", 
			"FromEntityUpdatedBalance", 
			"ToEntityUpdatedBalance", 
			"DepositDate",
			"CoreDeliveryTransactionDetailId",
			"FromAccountId",
				"ToAccountId",
				"UTRNumber",
				"BranchName",
				"BranchCode",
			"AuditDMLActionId", 
			"AuditDateTime")
			SELECT
			NEW."CoreTransactionDetailId", 
			NEW."Amount", 
			NEW."Comission", 
			NEW."Charges", 
			NEW."Notes", 
			NEW."IsDelivery", 
			NEW."DeliveryRefEmployeeId", 
			NEW."AcceptedByCustomer", 
			NEW."CustomerNotes", 
			NEW."AcceptedByEmployee", 
			NEW."EmployeeNotes", 
			NEW."500RupeesNotes", 
			NEW."200RupeesNotes", 
			NEW."100RupeesNotes", 
			NEW."50RupeesNotes", 
			NEW."20RupeesNotes", 
			NEW."10RupeesNotes", 
			NEW."AddedByRefEmployeeId", 
			NEW."AddedOn", 
			NEW."LastEditedByRefEmployeeId", 
			NEW."LastEditedOn", 
			NEW."FromEntityUpdatedBalance", 
			NEW."ToEntityUpdatedBalance", 
			NEW."DepositDate",
			NEW."CoreDeliveryTransactionDetailId",
			NEW."FromAccountId",
				NEW."ToAccountId",
				NEW."UTRNumber",
				NEW."BranchName",
				NEW."BranchCode",
			1, 
			now();
				END IF;
				RETURN NULL; -- result is ignored since this is an AFTER trigger
		END;
$BODY$;

ALTER FUNCTION dbo.coretransactiondetail_insert_update_delete()
		OWNER TO postgree_test_0oll_user;

CREATE OR REPLACE TRIGGER coretransactiondetail_audit
AFTER INSERT OR DELETE OR UPDATE 
ON dbo."CoreTransactionDetail"
FOR EACH ROW
EXECUTE FUNCTION dbo.coretransactiondetail_insert_update_delete();